# Import the modules
import numpy as np
import pandas as pd
from pathlib import Path
from sklearn.metrics import confusion_matrix, classification_report
---
## Split the Data into Training and Testing Sets
### Step 1: Read the `lending_data.csv` data from the `Resources` folder into a Pandas DataFrame.
# Read the CSV file from the Resources folder into a Pandas DataFrame
df = pd.read_csv('resources/lending_data.csv')

# Review the DataFrame
print(df.head())
print(df.shape)
### Step 2: Create the labels set (`y`)  from the “loan_status” column, and then create the features (`X`) DataFrame from the remaining columns.
# Separate the data into labels and features

# Separate the y variable, the labels
y = df['loan_status']

# Separate the X variable, the features
X = df.drop('loan_status', axis=1)
    
# Review the y variable Series
print(y.head())
# Review the X variable DataFrame
print(X.head())
### Step 3: Split the data into training and testing datasets by using `train_test_split`.
# Import the train_test_learn module
from sklearn.model_selection import train_test_split

# Split the data using train_test_split
y = df['loan_status']
X = df.drop('loan_status', axis=1)

# Assign a random_state of 1 to the function
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

---
## Create a Logistic Regression Model with the Original Data
###  Step 1: Fit a logistic regression model by using the training data (`X_train` and `y_train`).
# Import the LogisticRegression module from SKLearn
from sklearn.linear_model import LogisticRegression

# Instantiate the Logistic Regression model
# Assign a random_state parameter of 1 to the model
model = LogisticRegression(random_state=1)

# Fit the model using training data
model.fit(X_train, y_train)
### Step 2: Save the predictions on the testing data labels by using the testing feature data (`X_test`) and the fitted model.
# Make a prediction using the testing data
y_pred = model.predict(X_test)

### Step 3: Evaluate the model’s performance by doing the following:

* Generate a confusion matrix.

* Print the classification report.
# Generate a confusion matrix for the model
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)
# Print the classification report for the model
class_report = classification_report(y_test, y_pred)
print("Classification Report:")
print(class_report)
### Step 4: Answer the following question.
**Question:** How well does the logistic regression model predict both the `0` (healthy loan) and `1` (high-risk loan) labels?

**Answer:** The model is highly effective, especially for class 0 (healthy loans), with nearly perfect precision and recall. For class 1 (high-risk loans), the precision, recall, and F1-score are also very good, though slightly lower than for healthy loans, which is typical in classifications dealing with imbalanced datasets where one class (healthy loans) significantly outnumbers the other (high-risk loans).

This model is very capable in distinguishing between healthy and high-risk loans, making it a valuable tool for financial institutions assessing credit risk.
---
